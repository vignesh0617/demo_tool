-- base tables

create table `RULES_REPO` (	
`DOMAIN`	VARCHAR(255),
`DQ_DIMENSION`	VARCHAR(255),
`RULE_ID`	VARCHAR(255) PRIMARY KEY,
`RULE_TYPE`	VARCHAR(255),
`RULE_NAME`	VARCHAR(255),
`RULE_DESCRIPTION`	VARCHAR(4000),
`FILTER_CONDITION` VARCHAR(2000),
`RULE_CONDITION` VARCHAR(2000), -- mention rule conditions  which should pass a record here, dont mention conditions that will fail a record
`PARAM_NAME` VARCHAR(1000), -- These are label values that will come in CIDM UI . Give values as $PARAM1 or $FIELD 1 or $<any name>.If there are more than 1 label values, then VALUES SHOULD BE LIKE $PARAM1||$PARAM2. Note : Use only "||" as delimiter for separating the values
`TABLE_PARAM_NAME` VARCHAR(1000), -- IF THERE IS ANY JOIN CONDITIONS THEN VALUES SHOULD BE LIKE $TABLE1||$TABLE2 ELSE ''. IF no value is given here by default "Source Table 1" will be displayed in UI
`PARAM_VALUE_MAPPER` VARCHAR(2000), -- IF THERE ARE MORE THATN 1 SOURCE TABLES, THEN enter above `TABLE_PARAM_NAME` DELIMITER BY "||" WHICH WILL TELL FROM WHICH SOURCE TABLES THE FIELDS SHOULD BE MAPPED
`IGNORE_NULL` ENUM('Y','N'),
`IGNORE_BLANKS` ENUM('Y','N'),
`IS_DELETEABLE` ENUM('Y','N'),
`NO_OF_SOURCE_TABLES` INT, -- based on this value the no of fields dispalyed for selecting the source tables the UI changes
`NO_OF_FIELDS` INT, -- based on this value the no of fields dispalyed for the column nambe in the UI changes
`JOIN_CONDITIONS` VARCHAR(2000) -- IF THERE IS ANY JOIN CONDITION MENTION EVERYTHING AFTER "FROM" PART IN AN SQL, EG : $TABLE1 LEFT JOIN $TABLE2 ON $TABLE1.$COL1 = $TABLE2.$COL2 ,ELSE JUST GIVE ''
);


INSERT INTO RULES_REPO VALUES 
('Material Master','Conformity','DQ_MAS_004','Length','RL_001_LEN_08_CHK','Checks if the given field has character length of 8','','LENGTH($FIELD) = 8','$FIELD','',NULL,'Y','Y','N',1,1,''),
('Customer Master','Conformity','DQ_CUS_001','Data Validation','RL_001_NUMERIC_CHK','Field must have only numeric data values','','$FIELD REGEXP \"^\\\\d+$\"','$FIELD','',NULL,'Y','Y','N',1,1,''),
('Customer Master','Completeness','DQ_CUS_002','Mandatory','RL_001_MANDATORY_CHK','Check Blank and Nulls for the columns','','$PARAM1 IS NOT NULL AND length(trim($PARAM1) ) <> 0','$PARAM1','',NULL,'N','N','N',1,1,''),
('Material Master','Conformity','DQ_MAS_002','Length','RL_001_LEN_09_CHK','Checks if the given field has character length of 9','','LENGTH($FIELD) = 9','$FIELD','',NULL,'Y','Y','N',1,1,''),
('Vendor Master','Accuracy','DQ_VEN_001','Data Validation','RL_001_SPL_CHAR_CHK','Special char Check - ;:$#@%~^<>*+=?','','$PARAM1 NOT REGEXP \"[!@#$%^&*()]\"','$PARAM1','',NULL,'Y','Y','N',1,1,''),
('Vendor Master','Accuracy','DQ_VEN_002','Standard Format','RL_001_DATETIME_CHK','To check for Valid Date time format','','STR_TO_DATE(REPLACE($FIELD,\"/\",\"-\"),\"%d-%m-%Y\") IS NOT NULL OR STR_TO_DATE(REPLACE($FIELD,\"/\",\"-\"),\"%m-%d-%Y\") IS NOT NULL OR STR_TO_DATE(REPLACE($FIELD,\"/\",\"-\"),\"%Y-%m-%d\")','$FIELD','',NULL,'Y','Y','N',1,1,''),
('Vendor Master','Accuracy','DQ_VEN_004','Data Validation','RL_001_TWO_FIELDS__MIS_MATCH_CHECK_2','Checks if mentioned 2 fields from 2 diff tables are same or not','','$TABLE1.$COMPARE_COL1 = $TABLE2.$COMPARE_COL2','$JOIN_COL1||$JOIN_COL2||$COMPARE_COL1||$COMPARE_COL2','$TABLE1||$TABLE2','$TABLE1||$TABLE2||$TABLE1||$TABLE2','N','N','N',2,4,'$TABLE1 INNER JOIN $TABLE2 ON $TABLE1.$JOIN_COL1 = $TABLE2.$JOIN_COL2'),
('Vendor Master','Accuracy','DQ_VEN_005','Data Validation','RL_001_TWO_FIELDS__MIS_MATCH_CHECK_1','Checks if mentioned 2 fields from the table is same or not','','$COMPARE_COL1 = $COMPARE_COL2','$COMPARE_COL1||$COMPARE_COL2','','','N','N','N',1,2,'');


CREATE TABLE `RULE_BINDING` (
  `RULE_BINDING_ID` int NOT NULL AUTO_INCREMENT,
  `RULE_ID` VARCHAR(255),
  `TABLE_NAME` varchar(255),
  `COLUMN_NAME` varchar(255),
  `BIND_DATE` datetime DEFAULT CURRENT_TIMESTAMP,
  `IS_ACTIVE` ENUM('Y','N'),
  `FAILED_DATA_TABLE_NAME` VARCHAR(500),
  FOREIGN KEY (`RULE_ID`) REFERENCES `RULES_REPO`(`RULE_ID`),
  PRIMARY KEY (`RULE_BINDING_ID`),
  UNIQUE(`RULE_ID`,`TABLE_NAME`,`COLUMN_NAME`)
) ;


CREATE TABLE `RUN_HISTORY` (
  `RUN_ID` int NOT NULL auto_increment PRIMARY KEY,
  `RULE_ID` VARCHAR(255) DEFAULT NULL,
  `RULE_BINDING_ID` INT ,
  `TOTAL_RECORDS` int DEFAULT NULL,
  `FILTERED_RECORDS` int DEFAULT NULL,
  `PASSED_RECORDS` int DEFAULT NULL,
  `FAILED_RECORDS` int DEFAULT NULL,
  `RUN_DATE` datetime DEFAULT CURRENT_TIMESTAMP,
  FOREIGN KEY (`RULE_BINDING_ID`) REFERENCES `RULE_BINDING` (`RULE_BINDING_ID`),
  FOREIGN KEY (`RULE_ID`) REFERENCES `RULES_REPO` (`RULE_ID`)
) ;


CREATE TABLE TREND_CHART_BASE (NO_OF_DAYS_BACK INT);
INSERT INTO TREND_CHART_BASE VALUES (0),	(1),	(2),	(3),	(4),	(5),	(6),	(7),	(8),	(9),	(10),	(11),	(12),	(13),	(14),	(15),	(16),	(17),	(18),	(19),	(20),	(21),	(22),	(23),	(24),	(25),	(26),	(27),	(28),	(29),	(30),	(31),	(32),	(33),	(34),	(35),	(36),	(37),	(38),	(39),	(40),	(41),	(42),	(43),	(44),	(45),	(46),	(47),	(48),	(49),	(50),	(51),	(52),	(53),	(54),	(55),	(56),	(57),	(58),	(59),	(60),	(61),	(62),	(63),	(64),	(65),	(66),	(67),	(68),	(69),	(70),	(71),	(72),	(73),	(74),	(75),	(76),	(77),	(78),	(79),	(80),	(81),	(82),	(83),	(84),	(85),	(86),	(87),	(88),	(89),	(90),	(91),	(92),	(93),	(94),	(95),	(96),	(97),	(98),	(99),	(100),	(101),	(102),	(103),	(104),	(105),	(106),	(107),	(108),	(109),	(110),	(111),	(112),	(113),	(114),	(115),	(116),	(117),	(118),	(119),	(120),	(121),	(122),	(123),	(124),	(125),	(126),	(127),	(128),	(129),	(130),	(131),	(132),	(133),	(134),	(135),	(136),	(137),	(138),	(139),	(140),	(141),	(142),	(143),	(144),	(145),	(146),	(147),	(148),	(149),	(150),	(151),	(152),	(153),	(154),	(155),	(156),	(157),	(158),	(159),	(160),	(161),	(162),	(163),	(164),	(165),	(166),	(167),	(168),	(169),	(170),	(171),	(172),	(173),	(174),	(175),	(176),	(177),	(178),	(179);

CREATE TABLE `USERS` (
`ID` INT PRIMARY KEY AUTO_INCREMENT,
`NAME` VARCHAR(85), 
`EMAIL_ID` VARCHAR(150) unique,
`USER_NAME` VARCHAR(150) unique,
`PASSWORD` VARCHAR(150),
`ROLE` VARCHAR(30)
);

INSERT INTO USERS VALUES
(1,'Vignesh','vignesh.r5@cognizant.com','vigneshr','12345678','user'),
(2,'Siva Lakshmi','sivalakshmi.kandaswamy@cognizant.com','sival','12345678','user'),
(3,'Arun Jayakumar','arunkumar.jayabalan@cognizant.com','arunj','12345678','user'),
(4,'Arun Chidambharam','arunkumar.chidambaram2@cognizant.com','arunc','12345678','user'),
(5,'Ajay Joseph','ajay.joseph@cognizant.com','ajayj','12345678','user'),
(6,'Test Support','testemail@123.com','support','12345678','support'),
(7,'Test User','testemail@123.com','user','12345678','user');

CREATE TABLE `custom_rules_request` (
  `REQUEST_ID` int NOT NULL AUTO_INCREMENT,
  `USER_ID` int not null,
  `REQUEST_TYPE` varchar(15) DEFAULT NULL,
  `DESCRIPTION/SQL` varchar(600) DEFAULT NULL,
  `STATUS` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`REQUEST_ID`),
  FOREIGN KEY (`USER_ID`) REFERENCES `USERS`(`ID`),
  UNIQUE KEY `DESCRIPTION/SQL` (`DESCRIPTION/SQL`)
) ;


CREATE TABLE `comments` (
  `REQUEST_ID` int DEFAULT NULL,
  `COMMENT_BY` varchar(30) DEFAULT NULL,
  `COMMENT` varchar(1600) DEFAULT NULL,
  `TIME_STAMP` datetime DEFAULT CURRENT_TIMESTAMP,
  KEY `REQUEST_ID` (`REQUEST_ID`),
  CONSTRAINT `comments_ibfk_1` FOREIGN KEY (`REQUEST_ID`) REFERENCES `custom_rules_request` (`REQUEST_ID`)
) ;



CREATE TABLE LAST_UPDATE_TIME  ( ID INT , LAST_UPDATE_TIMESTAMP DATETIME DEFAULT CURRENT_TIMESTAMP);
INSERT INTO LAST_UPDATE_TIME VALUES (1,NOW());


-- views

CREATE OR REPLACE VIEW `score_card_latest` 
AS 
select DISTINCT `run_history`.`RUN_ID` AS `RUN_ID`,
		`run_history`.`RULE_BINDING_ID` AS `RULE_BINDING_ID`,
        `rules_repo`.`RULE_ID` AS `RULE_ID`,
		`rules_repo`.`DQ_DIMENSION` AS `DQ_DIMENSION`,
        `rules_repo`.`RULE_NAME` AS `RULE_NAME`,
        `rule_binding`.`FAILED_DATA_TABLE_NAME` AS `FAILED_DATA_TABLE_NAME`, 
        `rule_binding`.`TABLE_NAME` AS `TABLE_NAME`,
        `rule_binding`.`COLUMN_NAME` AS `COLUMN_NAME`,
        `run_history`.`TOTAL_RECORDS` AS `TOTAL_RECORDS`,
        `run_history`.`FILTERED_RECORDS` AS `FILTERED_RECORDS`,
        `run_history`.`PASSED_RECORDS` AS `PASSED_RECORDS`,
        `run_history`.`FAILED_RECORDS` AS `FAILED_RECORDS`,
        `run_history`.`RUN_DATE` AS `LAST_RUN` 
        from `rules_repo` inner join `run_history` on`rules_repo`.`RULE_ID` = `run_history`.`RULE_ID`
        inner join `rule_binding` on `rules_repo`.`RULE_ID` = `rule_binding`.`RULE_ID` and `run_history`.`rule_binding_id` = `rule_binding`.`rule_binding_id`
        where `rule_binding`.`is_active` = 'Y' and `run_history`.`RUN_ID` in (select max(`run_history`.`RUN_ID`) from `run_history` group by `run_history`.`RULE_BINDING_ID`) order by `rules_repo`.`DQ_DIMENSION`,`rules_repo`.`RULE_NAME`,`rule_binding`.`TABLE_NAME`,`rule_binding`.`COLUMN_NAME`;



CREATE OR REPLACE VIEW `score_card_history` 
AS 
select distinct `run_history`.`RUN_ID` AS `RUN_ID`,
		`run_history`.`RULE_BINDING_ID` AS `RULE_BINDING_ID`,
        `rules_repo`.`RULE_ID` AS `RULE_ID`,
		`rules_repo`.`DQ_DIMENSION` AS `DQ_DIMENSION`,
        `rules_repo`.`RULE_NAME` AS `RULE_NAME`,
        `rule_binding`.`FAILED_DATA_TABLE_NAME` AS `FAILED_DATA_TABLE_NAME`, 
        `rule_binding`.`TABLE_NAME` AS `TABLE_NAME`,
        `rule_binding`.`COLUMN_NAME` AS `COLUMN_NAME`,
        `run_history`.`TOTAL_RECORDS` AS `TOTAL_RECORDS`,
        `run_history`.`FILTERED_RECORDS` AS `FILTERED_RECORDS`,
        `run_history`.`PASSED_RECORDS` AS `PASSED_RECORDS`,
        `run_history`.`FAILED_RECORDS` AS `FAILED_RECORDS`,
        `run_history`.`RUN_DATE` AS `LAST_RUN` 
        from `rules_repo` inner join `run_history` on`rules_repo`.`RULE_ID` = `run_history`.`RULE_ID`
        inner join `rule_binding` on `rules_repo`.`RULE_ID` = `rule_binding`.`RULE_ID` and `run_history`.`rule_binding_id` = `rule_binding`.`rule_binding_id`
        where `rule_binding`.`is_active` = 'Y'
        order by `rules_repo`.`DQ_DIMENSION`,`rules_repo`.`RULE_NAME`,`rule_binding`.`TABLE_NAME`,`rule_binding`.`COLUMN_NAME`;


-- stored procedures 

DELIMITER //
CREATE PROCEDURE ALIAS_CREATOR(IN IN_TABLE_NAMES VARCHAR(2000),OUT OUT_FINAL_ALIAS VARCHAR(16000))
BEGIN

	DECLARE TEMP_ALIAS VARCHAR(16000) DEFAULT "";
	SET @CURRENT_DELIMITER = "||";
    SELECT DATABASE() INTO @CURRENT_DATABASE ;
	SET @NO_OF_LOOPS2 = ROUND((LENGTH(IN_TABLE_NAMES) - LENGTH(REPLACE(IN_TABLE_NAMES,@CURRENT_DELIMITER,"")))/LENGTH(@CURRENT_DELIMITER)) + 1  ;
	SET @CURRENT_LOOP = 1;
    
    LOOP1 : LOOP
		IF @CURRENT_LOOP > @NO_OF_LOOPS2 THEN
			LEAVE LOOP1;
        END IF;
        
        SET @CURRENT_TABLE_NAME = SUBSTRING_INDEX(SUBSTRING_INDEX(IN_TABLE_NAMES,@CURRENT_DELIMITER,@CURRENT_LOOP),@CURRENT_DELIMITER,-1);
        
        
		SET SESSION group_concat_max_len = 16000;
        SELECT GROUP_CONCAT(CONCAT(TABLE_NAME,'.',COLUMN_NAME,' AS `',TABLE_NAME,'.',COLUMN_NAME,'`')) INTO TEMP_ALIAS FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = @CURRENT_TABLE_NAME AND TABLE_SCHEMA = @CURRENT_DATABASE;
        IF(@CURRENT_LOOP > 1) THEN
			SET OUT_FINAL_ALIAS = CONCAT(OUT_FINAL_ALIAS,",",TEMP_ALIAS);
        ELSE
			SET OUT_FINAL_ALIAS = TEMP_ALIAS;
        END IF;
        
        SET @CURRENT_LOOP = @CURRENT_LOOP +1 ;
        
    END LOOP LOOP1;
END//


DELIMITER //
CREATE PROCEDURE `CREATE_FILTER_AND_RULE_CONDITION`(IN IN_FILTER_CONDITIONS VARCHAR(2000), IN IN_RULE_CONDITIONS VARCHAR(2000),IN IN_PARAMS VARCHAR(2000),IN IN_TABLE_PARAMS VARCHAR(1000),IN IN_IGNORE_NULLS ENUM('Y','N'),IN IN_IGNORE_BLANKS ENUM('Y','N'),IN IN_JOIN_CONDITIONS VARCHAR(2000),IN IN_COLUMNS VARCHAR(2000),IN IN_TABLES VARCHAR(2000),OUT OUT_FILTER_CONDITIONS VARCHAR(2000),OUT OUT_RULE_CONDITIONS VARCHAR(2000), OUT OUT_JOIN_CONDITIONS VARCHAR(2000),OUT OUT_FINAL_SELECT VARCHAR(1000)) 
BEGIN

set @ignore_nulls_condition = "";
set @ignore_blanks_condition = "";
set @current_delimiter = "||";
set @temp_select = IN_TABLES;

if position(@current_delimiter in @temp_select ) <> 0 then
	set @temp_select = concat(replace(@temp_select,@current_delimiter,".*,"),".*");
else
	set @temp_select = "A.*" ;
end if;

set OUT_FINAL_SELECT = @temp_select;

set @no_of_loops1 = round((length(IN_PARAMS)-length(replace(IN_PARAMS,@current_delimiter,"")))/length(@current_delimiter))+1;
set @no_of_loops2 = round((length(IN_TABLE_PARAMS)-length(replace(IN_TABLE_PARAMS,@current_delimiter,"")))/length(@current_delimiter))+1;

set @max_no_of_loops = greatest(@no_of_loops1,@no_of_loops2);

set @current_loop = 1;

condition_loop : loop
	if @current_loop > @max_no_of_loops then
		leave condition_loop;
    end if;
    
	set @current_param = substring_index(substring_index(IN_PARAMS,@current_delimiter,@current_loop),@current_delimiter,-1);
	set @current_param_replace_column_name = substring_index(substring_index(IN_COLUMNS,@current_delimiter,@current_loop),@current_delimiter,-1);
	
    set IN_RULE_CONDITIONS = replace(IN_RULE_CONDITIONS,@current_param,@current_param_replace_column_name);
	set IN_FILTER_CONDITIONS = replace(IN_FILTER_CONDITIONS,@current_param,@current_param_replace_column_name);
    set IN_JOIN_CONDITIONS = replace(IN_JOIN_CONDITIONS,@current_param,@current_param_replace_column_name);
    
	set @current_table_param = substring_index(substring_index(IN_TABLE_PARAMS,@current_delimiter,@current_loop),@current_delimiter,-1);
	set @current_table_param_replace_name = substring_index(substring_index(IN_TABLES,@current_delimiter,@current_loop),@current_delimiter,-1);
	
    set IN_RULE_CONDITIONS = replace(IN_RULE_CONDITIONS,@current_table_param,@current_table_param_replace_name);
	set IN_FILTER_CONDITIONS = replace(IN_FILTER_CONDITIONS,@current_table_param,@current_table_param_replace_name);
    set IN_JOIN_CONDITIONS = replace(IN_JOIN_CONDITIONS,@current_table_param,@current_table_param_replace_name);
    
    
	IF IN_IGNORE_NULLS = 'Y' THEN
		IF LENGTH(@ignore_nulls_condition) <> 0 THEN
			set @ignore_nulls_condition = CONCAT(@ignore_nulls_condition," AND ",@current_param_replace_column_name," is not null");
		else
			set @ignore_nulls_condition = CONCAT(@current_param_replace_column_name," is not null");			
		END IF;
    END IF;
    
    IF IN_IGNORE_BLANKS = 'Y' THEN
		IF LENGTH(@ignore_blanks_condition) <> 0 THEN
			set @ignore_blanks_condition = CONCAT(@ignore_blanks_condition," and length(trim(",@current_param_replace_column_name,") ) <> 0");
		else
			set @ignore_blanks_condition = CONCAT(" length(trim(",@current_param_replace_column_name,") ) <> 0");			
		END IF;
    END IF;
    
    set @current_loop = @current_loop+1;

end loop  condition_loop;
	
	-- set OUT_FILTER_CONDITIONS = IN_FILTER_CONDITIONS;
    
    IF IN_IGNORE_NULLS = 'Y' THEN
		IF LENGTH(IN_FILTER_CONDITIONS) <> 0 THEN
			set IN_FILTER_CONDITIONS = CONCAT(IN_FILTER_CONDITIONS," and ",@ignore_nulls_condition);
		else
			set IN_FILTER_CONDITIONS = CONCAT(@ignore_nulls_condition);			
		END IF;
    END IF;
    
    IF IN_IGNORE_BLANKS = 'Y' THEN
		IF LENGTH(IN_FILTER_CONDITIONS) <> 0 THEN
			set IN_FILTER_CONDITIONS = CONCAT(IN_FILTER_CONDITIONS," and ",@ignore_blanks_condition);
		else
			set IN_FILTER_CONDITIONS = CONCAT(@ignore_blanks_condition);		
		END IF;
    END IF;
    
    set OUT_FILTER_CONDITIONS = IN_FILTER_CONDITIONS;
    
    set OUT_JOIN_CONDITIONS = IN_JOIN_CONDITIONS;
    
    set OUT_RULE_CONDITIONS = IN_RULE_CONDITIONS;

END//

-- DELIMITER //
-- CREATE PROCEDURE `BIND_RULE`(IN IN_RULE_ID VARCHAR(255),IN IN_TABLE_NAME VARCHAR(255) , IN IN_COLUMN_NAME VARCHAR(255),IN IN_EXECUTE_RULE INT)
-- BEGIN
 
-- 	DECLARE DUPLICATE_RECORD_FOUND CONDITION FOR 1062;
--     DECLARE EXIT HANDLER FOR DUPLICATE_RECORD_FOUND
--     BEGIN
-- 		SELECT RULE_NAME INTO @V_RULE_NAME FROM RULES_REPO WHERE RULE_ID = IN_RULE_ID;
-- 		SELECT 409 as STATUS_CODE,concat(IN_TABLE_NAME," - ",IN_COLUMN_NAME,' is already binded to rule : ', @V_RULE_NAME) AS MSG;
-- 	END;
--     SET @CURRENT_DELIMITER = "||";
-- 	SET @V_RULE_BINDING_ID =0;
--     SET @V_BIND_DATE = SYSDATE();
    
--     SET @FAILED_DATA_TABLE_NAME = CONCAT(REPLACE(IN_TABLE_NAME,@CURRENT_DELIMITER,"_"),"_",IN_RULE_ID);
     
-- 	INSERT INTO RULE_BINDING (`RULE_ID`,`TABLE_NAME`,`COLUMN_NAME`,`BIND_DATE`,`IS_ACTIVE`,`FAILED_DATA_TABLE_NAME`) VALUES (IN_RULE_ID,IN_TABLE_NAME, IN_COLUMN_NAME,@V_BIND_DATE,'Y',@FAILED_DATA_TABLE_NAME);
	 
-- 	SELECT MAX(`RULE_BINDING_ID`)  INTO @V_RULE_BINDING_ID FROM RULE_BINDING;
    
-- 	IF IN_EXECUTE_RULE =1 THEN
-- 		CALL RUN_RULE(@V_RULE_BINDING_ID);
-- 	ELSE 
-- 		SELECT 200 as STATUS_CODE,"Successfully Binded" as MSG;
-- 	END IF;

-- END//


DELIMITER //
CREATE PROCEDURE `BIND_RULE`(IN IN_RULE_ID VARCHAR(255),IN IN_TABLE_NAME VARCHAR(255) , IN IN_COLUMN_NAME VARCHAR(255),IN IN_EXECUTE_RULE INT)
BEGIN
 
	DECLARE DUPLICATE_RECORD_FOUND CONDITION FOR 1062;
    DECLARE EXIT HANDLER FOR DUPLICATE_RECORD_FOUND
    BEGIN
		SELECT RULE_NAME INTO @V_RULE_NAME FROM RULES_REPO WHERE RULE_ID = IN_RULE_ID;
        SELECT IS_ACTIVE INTO @IS_ACTIVE FROM RULE_BINDING WHERE TABLE_NAME = IN_TABLE_NAME AND COLUMN_NAME = IN_COLUMN_NAME AND RULE_ID = IN_RULE_ID;
        IF @IS_ACTIVE = 'Y' THEN
			SELECT 409 as STATUS_CODE,concat(IN_TABLE_NAME," - ",IN_COLUMN_NAME,' is already binded to rule : ', @V_RULE_NAME) AS MSG;
		ELSE 
			UPDATE RULE_BINDING SET IS_ACTIVE = 'Y' WHERE TABLE_NAME = IN_TABLE_NAME AND COLUMN_NAME = IN_COLUMN_NAME AND RULE_ID = IN_RULE_ID;
			
            SELECT RULE_BINDING_ID INTO @V_RULE_BINDING_ID FROM RULE_BINDING WHERE TABLE_NAME = IN_TABLE_NAME AND COLUMN_NAME = IN_COLUMN_NAME AND RULE_ID = IN_RULE_ID;
            
            SELECT MAX(RUN_ID) INTO @V_RUN_ID FROM RUN_HISTORY WHERE RULE_BINDING_ID = @V_RULE_BINDING_ID GROUP BY RULE_BINDING_ID;
            
            SELECT C.RULE_NAME,TABLE_NAME,COLUMN_NAME,B.FAILED_RECORDS  INTO @V_RULE_NAME,@V_TABLE_NAME,@V_COLUMN_NAME,@V_FAILED_RECORDS FROM RULE_BINDING A INNER JOIN RUN_HISTORY B 
			ON A.RULE_BINDING_ID = B.RULE_BINDING_ID INNER JOIN RULES_REPO C ON A.RULE_ID = C.RULE_ID 
            WHERE B.RUN_ID = @V_RUN_ID;
        
            
            INSERT INTO UI_SCORE_CARD_TOP_TABLE
			SELECT @V_RULE_NAME AS `RULE_NAME`,
			concat(@V_TABLE_NAME,' - ',@V_COLUMN_NAME) AS `RULE_BINDING`,
			`GET_LAST_FAILED_RECORD`(4,@V_RULE_NAME,@V_TABLE_NAME,@V_COLUMN_NAME) AS `FAILED_RECORDS_4_DAYS_BACK`,
			`GET_LAST_FAILED_RECORD`(3,@V_RULE_NAME,@V_TABLE_NAME,@V_COLUMN_NAME) AS `FAILED_RECORDS_3_DAYS_BACK`,
			`GET_LAST_FAILED_RECORD`(2,@V_RULE_NAME,@V_TABLE_NAME,@V_COLUMN_NAME) AS `FAILED_RECORDS_2_DAYS_BACK`,
			`GET_LAST_FAILED_RECORD`(1,@V_RULE_NAME,@V_TABLE_NAME,@V_COLUMN_NAME) AS `FAILED_RECORDS_1_DAYS_BACK`,
			`GET_LAST_FAILED_RECORD`(0,@V_RULE_NAME,@V_TABLE_NAME,@V_COLUMN_NAME) AS `FAILED_RECORDS_0_DAYS_BACK`,
			@V_TABLE_NAME AS `TABLE_NAME`,
			@V_COLUMN_NAME AS `COLUMN_NAME`,
			`b`.`DOMAIN` AS `DOMAIN`,
			`a`.`DQ_DIMENSION` AS `DQ_DIMENSION`,
			`b`.`RULE_TYPE` AS `RULE_TYPE`,@V_RUN_ID AS `LATEST_RUN_ID`,
			`a`.`FAILED_DATA_TABLE_NAME` AS `FAILED_DATA_TABLE_NAME`
			from 
				`score_card_history` `a` join `rules_repo` `b` on `a`.`RULE_ID` = `b`.`RULE_ID`
				 join `rule_binding` `c` on `a`.`RULE_BINDING_ID` = `c`.`RULE_BINDING_ID` and `a`.`RULE_ID` = `c`.`RULE_ID`
			WHERE `a`.`RUN_ID` = @V_RUN_ID;
            
            SELECT 200 as STATUS_CODE,"This rule was previously deleted. Now its again activated!" as MSG;
        END IF;
    END;
    SET @CURRENT_DELIMITER = "||";
	SET @V_RULE_BINDING_ID =0;
    SET @V_BIND_DATE = SYSDATE();
    
    SET @FAILED_DATA_TABLE_NAME = CONCAT(REPLACE(IN_TABLE_NAME,@CURRENT_DELIMITER,"_"),"_",IN_RULE_ID);
     
	INSERT INTO RULE_BINDING (`RULE_ID`,`TABLE_NAME`,`COLUMN_NAME`,`BIND_DATE`,`IS_ACTIVE`,`FAILED_DATA_TABLE_NAME`) VALUES (IN_RULE_ID,IN_TABLE_NAME, IN_COLUMN_NAME,@V_BIND_DATE,'Y',@FAILED_DATA_TABLE_NAME);
	 
	SELECT MAX(`RULE_BINDING_ID`)  INTO @V_RULE_BINDING_ID FROM RULE_BINDING;
    
	IF IN_EXECUTE_RULE =1 THEN
		CALL RUN_RULE(@V_RULE_BINDING_ID);
	ELSE 
		SELECT 200 as STATUS_CODE,"Successfully Binded" as MSG;
	END IF;

END//


DELIMITER //
CREATE PROCEDURE DELETE_RULE_BINDING(IN IN_RULE_BINDING_ID INT)
BEGIN

	UPDATE RULE_BINDING SET IS_ACTIVE = 'N' WHERE RULE_BINDING_ID = IN_RULE_BINDING_ID;

    DELETE FROM UI_SCORE_CARD_TOP_TABLE WHERE LATEST_RUN_ID = 
    (SELECT MAX(RUN_ID) FROM RUN_HISTORY WHERE RULE_BINDING_ID = IN_RULE_BINDING_ID );
    
    SELECT 200 AS STATUS_CODE, 'Sucessfully Deleted!' as MSG;
END//


-- ALL NECESSARY PROCEDURES, FUNCTIONS, EVENTS AND VIEWS FOR POPULATING DATA FOR CHARTS


DELIMITER //
CREATE FUNCTION GET_LAST_FAILED_RECORD(IN_NO_OF_DAYS INT ,IN_RULE_NAME VARCHAR(255) ,IN_TABLE_NAME VARCHAR(255), IN_COLUMN_NAME VARCHAR(255) )
RETURNS INT
DETERMINISTIC
BEGIN
SET @FAILED_RECORDS = NULL;

SELECT FAILED_RECORDS INTO @FAILED_RECORDS
FROM SCORE_CARD_HISTORY
WHERE RULE_NAME  = IN_RULE_NAME AND TABLE_NAME = IN_TABLE_NAME  AND COLUMN_NAME = IN_COLUMN_NAME
AND DATE(LAST_RUN) <= DATE(SYSDATE() - INTERVAL IN_NO_OF_DAYS DAY)
ORDER BY LAST_RUN DESC LIMIT 1;

IF @FAILED_RECORDS IS NULL THEN
SET @FAILED_RECORDS = 0;
END IF;
RETURN @FAILED_RECORDS;
END//



-- CREATE OR REPLACE VIEW  UI_SCORE_CARD_TOP_TABLE_LATEST_DATA AS 
-- SELECT A.RULE_NAME,CONCAT(A.TABLE_NAME,' - ',A.COLUMN_NAME) AS 'RULE_BINDING',
-- GET_LAST_FAILED_RECORD(4,A.RULE_NAME,A.TABLE_NAME,A.COLUMN_NAME) AS 'FAILED_RECORDS_4_DAYS_BACK' ,
-- GET_LAST_FAILED_RECORD(3,A.RULE_NAME,A.TABLE_NAME,A.COLUMN_NAME) AS 'FAILED_RECORDS_3_DAYS_BACK' ,
-- GET_LAST_FAILED_RECORD(2,A.RULE_NAME,A.TABLE_NAME,A.COLUMN_NAME) AS 'FAILED_RECORDS_2_DAYS_BACK' ,
-- GET_LAST_FAILED_RECORD(1,A.RULE_NAME,A.TABLE_NAME,A.COLUMN_NAME) AS 'FAILED_RECORDS_1_DAYS_BACK' ,
-- GET_LAST_FAILED_RECORD(0,A.RULE_NAME,A.TABLE_NAME,A.COLUMN_NAME) AS 'FAILED_RECORDS_0_DAYS_BACK' ,
-- A.TABLE_NAME,A.COLUMN_NAME,B.DOMAIN,A.DQ_DIMENSION,B.RULE_TYPE,MAX(A.RUN_ID) AS 'LATEST_RUN_ID',A.FAILED_DATA_TABLE_NAME,SYSDATE() AS 'REFRESHSED_ON'
-- FROM SCORE_CARD_HISTORY A INNER JOIN RULES_REPO B ON A.RULE_ID = B.RULE_ID INNER JOIN RULE_BINDING C ON A.RULE_BINDING_ID = C.RULE_BINDING_ID AND A.RULE_ID = C.RULE_ID
-- GROUP BY A.RULE_NAME, A.TABLE_NAME,A.COLUMN_NAME,B.DOMAIN,B.DQ_DIMENSION,B.RULE_TYPE,A.FAILED_DATA_TABLE_NAME
-- ORDER BY RULE_NAME,TABLE_NAME,COLUMN_NAME,LAST_RUN DESC;


CREATE OR REPLACE VIEW  UI_SCORE_CARD_TOP_TABLE_LATEST_DATA AS 
SELECT A.RULE_NAME,CONCAT(A.TABLE_NAME,' - ',A.COLUMN_NAME) AS 'RULE_BINDING',
GET_LAST_FAILED_RECORD(4,A.RULE_NAME,A.TABLE_NAME,A.COLUMN_NAME) AS 'FAILED_RECORDS_4_DAYS_BACK' ,
GET_LAST_FAILED_RECORD(3,A.RULE_NAME,A.TABLE_NAME,A.COLUMN_NAME) AS 'FAILED_RECORDS_3_DAYS_BACK' ,
GET_LAST_FAILED_RECORD(2,A.RULE_NAME,A.TABLE_NAME,A.COLUMN_NAME) AS 'FAILED_RECORDS_2_DAYS_BACK' ,
GET_LAST_FAILED_RECORD(1,A.RULE_NAME,A.TABLE_NAME,A.COLUMN_NAME) AS 'FAILED_RECORDS_1_DAYS_BACK' ,
GET_LAST_FAILED_RECORD(0,A.RULE_NAME,A.TABLE_NAME,A.COLUMN_NAME) AS 'FAILED_RECORDS_0_DAYS_BACK' ,
A.TABLE_NAME,A.COLUMN_NAME,B.DOMAIN,A.DQ_DIMENSION,B.RULE_TYPE,MAX(A.RUN_ID) AS 'LATEST_RUN_ID',A.FAILED_DATA_TABLE_NAME 
FROM SCORE_CARD_HISTORY A INNER JOIN RULES_REPO B ON A.RULE_ID = B.RULE_ID INNER JOIN RULE_BINDING C ON A.RULE_BINDING_ID = C.RULE_BINDING_ID AND A.RULE_ID = C.RULE_ID
WHERE C.IS_ACTIVE = 'Y'
GROUP BY A.RULE_NAME, A.TABLE_NAME,A.COLUMN_NAME,B.DOMAIN,A.DQ_DIMENSION,B.RULE_TYPE,A.FAILED_DATA_TABLE_NAME 
ORDER BY A.RULE_NAME,A.TABLE_NAME,A.COLUMN_NAME DESC;



CREATE TABLE UI_SCORE_CARD_TOP_TABLE AS SELECT * FROM UI_SCORE_CARD_TOP_TABLE_LATEST_DATA;
 
CREATE TABLE TREND_CHART_DATA (RULE_NAME VARCHAR(255),`TABLE_NAME` VARCHAR(255),`COLUMN_NAME` VARCHAR(255),FAILED_RECORDS INT,`DATE` VARCHAR(10), `DATE2` DATE);

-- THIS PROCEDURE IS THE OLD CODE. OPTIMIZED CODE IS BELOW THIS

-- DELIMITER //
-- CREATE PROCEDURE REFRESH_SCORE_CARD_DATA() 
-- BEGIN
--     DECLARE TABLE_NOT_FOUND CONDITION FOR 1146;
--     DECLARE EXIT HANDLER FOR TABLE_NOT_FOUND
--     BEGIN
-- 	CREATE TABLE UI_SCORE_CARD_TOP_TABLE AS SELECT * FROM UI_SCORE_CARD_TOP_TABLE_LATEST_DATA;
--     END;
--     
--     TRUNCATE TABLE UI_SCORE_CARD_TOP_TABLE;
-- 	INSERT INTO UI_SCORE_CARD_TOP_TABLE SELECT * FROM UI_SCORE_CARD_TOP_TABLE_LATEST_DATA;
-- END//

-- THIS ALSO OLD PROCEDURE CODE

-- DELIMITER //
-- CREATE PROCEDURE REFRESH_TREND_CHART_DATA()
-- BEGIN
-- DECLARE LOOP_NO INT DEFAULT (0);
-- DECLARE TABLE_NOT_FOUND CONDITION FOR 1146;
-- DECLARE CONTINUE HANDLER FOR TABLE_NOT_FOUND
-- BEGIN
-- CREATE TABLE TREND_CHART_DATA (
-- RULE_NAME VARCHAR(255),
-- `TABLE_NAME` VARCHAR(255),
-- `COLUMN_NAME` VARCHAR(255),
-- FAILED_RECORDS INT,
-- `DATE` VARCHAR(10), 
-- `DATE2` DATE);
-- END;

-- SELECT COUNT(*) INTO @MAX_LOOP_NO FROM UI_SCORE_CARD_TOP_TABLE;

-- TRUNCATE TABLE TREND_CHART_DATA;

-- INSERT_LOOP : LOOP
-- 	IF LOOP_NO >= @MAX_LOOP_NO THEN
-- 		LEAVE INSERT_LOOP;
--     END IF;
--     
--     SELECT RULE_NAME,TABLE_NAME,COLUMN_NAME INTO @V_RULE_NAME,@V_TABLE_NAME,@V_COLUMN_NAME FROM UI_SCORE_CARD_TOP_TABLE LIMIT LOOP_NO,1;
-- 	
--     INSERT INTO TREND_CHART_DATA
-- 	SELECT @V_RULE_NAME,@V_TABLE_NAME,@V_COLUMN_NAME,
-- 	GET_LAST_FAILED_RECORD(NO_OF_DAYS_BACK,@V_RULE_NAME,@V_TABLE_NAME,@V_COLUMN_NAME),
--     DATE_FORMAT(SYSDATE() - INTERVAL NO_OF_DAYS_BACK DAY,'%b-%d') AS `DATE`,
--     DATE(SYSDATE() - INTERVAL NO_OF_DAYS_BACK DAY) AS `DATE2`
-- 	FROM TREND_CHART_BASE
-- 	ORDER BY NO_OF_DAYS_BACK DESC;
--     
--     SET LOOP_NO = LOOP_NO+1;

-- END LOOP INSERT_LOOP;

-- END//

-- for now commenting out these events : 

-- CREATE EVENT REFRESH_DATA
-- ON SCHEDULE EVERY 4 HOUR
-- COMMENT 'Used to refresh data for score_card_top_table in CIDM UI'
-- do CALL REFRESH_SCORE_CARD_DATA();

-- CREATE EVENT REFRESH_TREND_CHART_DATA_EVENT
-- ON SCHEDULE EVERY 12 HOUR
-- COMMENT 'event for refreshing latest trend chart data'
-- DO CALL REFRESH_TREND_CHART_DATA();

-- FROM HERE THE UPDATED CODE STARTS

DELIMITER //
CREATE PROCEDURE REFRESH_SCORE_CARD_DATA ( IN IN_REFRESH_ENTITRE_DATA INT)
BEGIN
    DECLARE TABLE_NOT_FOUND CONDITION FOR 1146;
    DECLARE EXIT HANDLER FOR TABLE_NOT_FOUND
    BEGIN
	CREATE TABLE UI_SCORE_CARD_TOP_TABLE AS SELECT * FROM UI_SCORE_CARD_TOP_TABLE_LATEST_DATA;
    END;
    
    IF IN_REFRESH_ENTITRE_DATA =1 THEN
		TRUNCATE TABLE UI_SCORE_CARD_TOP_TABLE;
		INSERT INTO UI_SCORE_CARD_TOP_TABLE SELECT * FROM UI_SCORE_CARD_TOP_TABLE_LATEST_DATA;
	ELSE
		-- FIRST WE SELECT THE MAX RUN ID , THEN UPDATE FAILED RECORDS COUNT ONLY FOR THAT ROW ALONE IN UI_SCORE_CARD_TOP_TABLE
		SELECT C.RULE_NAME,B.RUN_ID,TABLE_NAME,COLUMN_NAME,B.FAILED_RECORDS  INTO @V_RULE_NAME,@V_RUN_ID,@V_TABLE_NAME,@V_COLUMN_NAME,@V_FAILED_RECORDS FROM RULE_BINDING A INNER JOIN RUN_HISTORY B 
		ON A.RULE_BINDING_ID = B.RULE_BINDING_ID INNER JOIN RULES_REPO C ON A.RULE_ID = C.RULE_ID ORDER BY B.RUN_ID DESC LIMIT 0,1;
        
        
        SELECT COUNT(*)  INTO @IS_OLD_RECORD FROM UI_SCORE_CARD_TOP_TABLE WHERE RULE_NAME = @V_RULE_NAME AND TABLE_NAME = @V_TABLE_NAME AND COLUMN_NAME = @V_COLUMN_NAME;
		
        IF @IS_OLD_RECORD = 1 THEN
			UPDATE UI_SCORE_CARD_TOP_TABLE SET FAILED_RECORDS_0_DAYS_BACK = @V_FAILED_RECORDS , LATEST_RUN_ID = @V_RUN_ID WHERE RULE_NAME = @V_RULE_NAME AND TABLE_NAME = @V_TABLE_NAME AND COLUMN_NAME = @V_COLUMN_NAME;
        ELSE
			INSERT INTO UI_SCORE_CARD_TOP_TABLE
			SELECT @V_RULE_NAME AS `RULE_NAME`,
			concat(@V_TABLE_NAME,' - ',@V_COLUMN_NAME) AS `RULE_BINDING`,
			`GET_LAST_FAILED_RECORD`(4,@V_RULE_NAME,@V_TABLE_NAME,@V_COLUMN_NAME) AS `FAILED_RECORDS_4_DAYS_BACK`,
			`GET_LAST_FAILED_RECORD`(3,@V_RULE_NAME,@V_TABLE_NAME,@V_COLUMN_NAME) AS `FAILED_RECORDS_3_DAYS_BACK`,
			`GET_LAST_FAILED_RECORD`(2,@V_RULE_NAME,@V_TABLE_NAME,@V_COLUMN_NAME) AS `FAILED_RECORDS_2_DAYS_BACK`,
			`GET_LAST_FAILED_RECORD`(1,@V_RULE_NAME,@V_TABLE_NAME,@V_COLUMN_NAME) AS `FAILED_RECORDS_1_DAYS_BACK`,
			`GET_LAST_FAILED_RECORD`(0,@V_RULE_NAME,@V_TABLE_NAME,@V_COLUMN_NAME) AS `FAILED_RECORDS_0_DAYS_BACK`,
			@V_TABLE_NAME AS `TABLE_NAME`,
			@V_COLUMN_NAME AS `COLUMN_NAME`,
			`b`.`DOMAIN` AS `DOMAIN`,
			`a`.`DQ_DIMENSION` AS `DQ_DIMENSION`,
			`b`.`RULE_TYPE` AS `RULE_TYPE`,max(`a`.`RUN_ID`) AS `LATEST_RUN_ID`,
			`a`.`FAILED_DATA_TABLE_NAME` AS `FAILED_DATA_TABLE_NAME`
			from 
				`score_card_history` `a` join `rules_repo` `b` on `a`.`RULE_ID` = `b`.`RULE_ID`
				 join `rule_binding` `c` on `a`.`RULE_BINDING_ID` = `c`.`RULE_BINDING_ID` and `a`.`RULE_ID` = `c`.`RULE_ID`
			WHERE `a`.`RUN_ID` = @V_RUN_ID;
        END IF;
    END IF;
END//

DELIMITER //
CREATE PROCEDURE REFRESH_TREND_CHART_DATA( IN IN_REFRESH_ENTIRE_DATA INT)
BEGIN
DECLARE LOOP_NO INT DEFAULT (0);
DECLARE TABLE_NOT_FOUND CONDITION FOR 1146;
DECLARE CONTINUE HANDLER FOR TABLE_NOT_FOUND
BEGIN
	CREATE TABLE TREND_CHART_DATA (
	RULE_NAME VARCHAR(255),
	`TABLE_NAME` VARCHAR(255),
	`COLUMN_NAME` VARCHAR(255),
	FAILED_RECORDS INT,
	`DATE` VARCHAR(10), 
	`DATE2` DATE);
END;


	IF IN_REFRESH_ENTIRE_DATA =1 THEN 
		SELECT COUNT(*) INTO @MAX_LOOP_NO FROM UI_SCORE_CARD_TOP_TABLE;

		TRUNCATE TABLE TREND_CHART_DATA;

		INSERT_LOOP : LOOP
			IF LOOP_NO >= @MAX_LOOP_NO THEN
				LEAVE INSERT_LOOP;
			END IF;
			
			SELECT RULE_NAME,TABLE_NAME,COLUMN_NAME INTO @V_RULE_NAME,@V_TABLE_NAME,@V_COLUMN_NAME FROM UI_SCORE_CARD_TOP_TABLE LIMIT LOOP_NO,1;
			
			INSERT INTO TREND_CHART_DATA
			SELECT @V_RULE_NAME,@V_TABLE_NAME,@V_COLUMN_NAME,
			GET_LAST_FAILED_RECORD(NO_OF_DAYS_BACK,@V_RULE_NAME,@V_TABLE_NAME,@V_COLUMN_NAME),
			DATE_FORMAT(SYSDATE() - INTERVAL NO_OF_DAYS_BACK DAY,'%b-%d') AS `DATE`,
			DATE(SYSDATE() - INTERVAL NO_OF_DAYS_BACK DAY) AS `DATE2`
			FROM TREND_CHART_BASE
			ORDER BY NO_OF_DAYS_BACK DESC;
			
			SET LOOP_NO = LOOP_NO+1;

		END LOOP INSERT_LOOP;

	ELSE
		-- FIRST WE SELECT THE MAX RUN ID , THEN UPDATE FAILED RECORDS COUNT ONLY FOR THAT ROW ALONE IN UI_SCORE_CARD_TOP_TABLE
		SELECT C.RULE_NAME,TABLE_NAME,COLUMN_NAME,B.FAILED_RECORDS  INTO @V_RULE_NAME,@V_TABLE_NAME,@V_COLUMN_NAME,@V_FAILED_RECORDS FROM RULE_BINDING A INNER JOIN RUN_HISTORY B 
		ON A.RULE_BINDING_ID = B.RULE_BINDING_ID INNER JOIN RULES_REPO C ON A.RULE_ID = C.RULE_ID ORDER BY B.RUN_ID DESC LIMIT 0,1;
        
        SELECT COUNT(*)  INTO @IS_OLD_RECORD FROM TREND_CHART_DATA WHERE RULE_NAME = @V_RULE_NAME AND TABLE_NAME = @V_TABLE_NAME AND COLUMN_NAME = @V_COLUMN_NAME;
		
		IF @IS_OLD_RECORD >= 1 THEN
			UPDATE TREND_CHART_DATA SET FAILED_RECORDS = @V_FAILED_RECORDS  WHERE RULE_NAME = @V_RULE_NAME AND TABLE_NAME = @V_TABLE_NAME AND COLUMN_NAME = @V_COLUMN_NAME AND DATE2 = DATE(SYSDATE());
        ELSE
			INSERT INTO TREND_CHART_DATA
			SELECT @V_RULE_NAME,@V_TABLE_NAME,@V_COLUMN_NAME,
			GET_LAST_FAILED_RECORD(NO_OF_DAYS_BACK,@V_RULE_NAME,@V_TABLE_NAME,@V_COLUMN_NAME),
			DATE_FORMAT(SYSDATE() - INTERVAL NO_OF_DAYS_BACK DAY,'%b-%d') AS `DATE`,
			DATE(SYSDATE() - INTERVAL NO_OF_DAYS_BACK DAY) AS `DATE2`
			FROM TREND_CHART_BASE
			ORDER BY NO_OF_DAYS_BACK DESC;
        END IF;
        
    END IF;

END//


DELIMITER //
CREATE PROCEDURE REFRESH_SCORE_CARD_AND_TREND_CHART_DATA()
BEGIN
	SELECT TIMESTAMPDIFF(DAY,LAST_UPDATE_TIMESTAMP,NOW()) INTO @CONDITION1 FROM LAST_UPDATE_TIME WHERE ID = 1;
    SELECT TIMESTAMPDIFF(DAY,MAX(DATE2),NOW()) INTO @CONDITION2  FROM TREND_CHART_DATA;
	SET @REFRESH_ENTIRE_SET = 0;
    
    IF @CONDITION1 >= 1 OR @CONDITION2 >=1 THEN
		SET @REFRESH_ENTIRE_SET = 1;
        UPDATE LAST_UPDATE_TIME SET LAST_UPDATE_TIMESTAMP = NOW() WHERE ID=1;
    END IF;
    
    CALL REFRESH_SCORE_CARD_DATA(@REFRESH_ENTIRE_SET);
    CALL REFRESH_TREND_CHART_DATA(@REFRESH_ENTIRE_SET);
    
END//

DELIMITER //
CREATE PROCEDURE `RUN_RULE`(IN IN_RULE_BINDING_ID INT)
BEGIN

	DECLARE TABLE_NOT_FOUND_ERROR CONDITION FOR 1146;
    
    DECLARE EXIT HANDLER FOR TABLE_NOT_FOUND_ERROR
    BEGIN
    
			
			IF POSITION("join" in @V_TABLE_NAME) = 0 THEN
				SET @FAILED_DATA_TABLE_QUERY = CONCAT(
					  "CREATE TABLE `",@V_FAILED_DATA_TABLE_NAME,"` LIKE ",@V_TABLE_NAME
				);
			ELSE
				CALL ALIAS_CREATOR(@V_TABLE_NAME3,@FIANL_ALIAS);
                SET @FAILED_DATA_TABLE_QUERY = CONCAT(
					  "CREATE TABLE `",@V_FAILED_DATA_TABLE_NAME,"` AS SELECT ",@FIANL_ALIAS," FROM ",@V_TABLE_NAME," LIMIT 0"
				);
            END IF;
            
			PREPARE FAILED_DATA_TABLE_QUERY FROM @FAILED_DATA_TABLE_QUERY;
			EXECUTE FAILED_DATA_TABLE_QUERY;
			DEALLOCATE PREPARE FAILED_DATA_TABLE_QUERY;
            
            SET @ALTER_DATA_TABLE_QUERY = CONCAT(
				"ALTER TABLE ", @V_FAILED_DATA_TABLE_NAME ," 
				ADD COLUMN `RUN_ID` int DEFAULT NULL FIRST,
				ADD COLUMN `RULE_BINDING_ID` INT DEFAULT NULL AFTER `RUN_ID`,
				ADD COLUMN `RULE_ID` VARCHAR(255) DEFAULT NULL AFTER `RULE_BINDING_ID`,
                ADD COLUMN `RUN_DATE` DATETIME DEFAULT CURRENT_TIMESTAMP AFTER `RULE_ID`,
				ADD CONSTRAINT FOREIGN KEY (`RUN_ID`) REFERENCES `RUN_HISTORY` (`RUN_ID`),
				ADD CONSTRAINT FOREIGN KEY (`RULE_BINDING_ID`) REFERENCES `RULE_BINDING` (`RULE_BINDING_ID`),
				ADD CONSTRAINT FOREIGN KEY (`RULE_ID`) REFERENCES `RULES_REPO` (`RULE_ID`)"
			);
			PREPARE ALTER_DATA_TABLE_QUERY FROM @ALTER_DATA_TABLE_QUERY;
			EXECUTE ALTER_DATA_TABLE_QUERY;
			DEALLOCATE PREPARE ALTER_DATA_TABLE_QUERY;
			
			PREPARE INSERT_QUERY2 FROM @INSERT_QUERY;
			EXECUTE INSERT_QUERY2;
			DEALLOCATE PREPARE INSERT_QUERY2;

            CALL REFRESH_SCORE_CARD_AND_TREND_CHART_DATA();
            
            SELECT 200 as STATUS_CODE,"Rule Execution Successfull" AS MSG;
    END;

	SET @V_RULE_ID = '';
    SET @V_TABLE_NAME = '';
    SET @V_TABLE_NAME3 = '';
    SET @V_COLUMN_NAME = '';
    SET @V_FAILED_DATA_TABLE_NAME = '';
    SET @V_RUN_ID = '';
    SET @V_RUN_DATE = SYSDATE();
    SET @V_FILTER_CONDITION = "";
    SET @V_RULE_CONDITION = "";
    SET @V_PARAM_NAME = "";
    SET @V_IGNORE_NULL = "";
    SET @V_IGNORE_BLANKS = "";
    
    
    SELECT `RULE_ID`,`TABLE_NAME`,`COLUMN_NAME`,`FAILED_DATA_TABLE_NAME` INTO @V_RULE_ID,@V_TABLE_NAME,@V_COLUMN_NAME,@V_FAILED_DATA_TABLE_NAME FROM RULE_BINDING WHERE RULE_BINDING_ID = IN_RULE_BINDING_ID; 
    
    SELECT `FILTER_CONDITION`,`RULE_CONDITION`,`PARAM_NAME`,`TABLE_PARAM_NAME`,`IGNORE_NULL`,`IGNORE_BLANKS`,`JOIN_CONDITIONS` INTO @V_FILTER_CONDITION,@V_RULE_CONDITION,@V_PARAM_NAME,@V_TABLE_PARAM_NAME,@V_IGNORE_NULL,@V_IGNORE_BLANKS,@V_JOIN_CONDITIONS FROM RULES_REPO WHERE RULE_ID = @V_RULE_ID;
    
	CALL CREATE_FILTER_AND_RULE_CONDITION (@V_FILTER_CONDITION,@V_RULE_CONDITION,@V_PARAM_NAME,@V_TABLE_PARAM_NAME,@V_IGNORE_NULL,@V_IGNORE_BLANKS,@V_JOIN_CONDITIONS,@V_COLUMN_NAME,@V_TABLE_NAME,@V_FINAL_FILTER_CONDITIONS,@V_FINAL_RULE_CONDITIONS,@V_FINAL_JOIN_CONDITIONS,@V_FINAL_SELECT);

	
    SET @V_TABLE_NAME3 = @V_TABLE_NAME;
    
	IF @V_FINAL_JOIN_CONDITIONS <> '' THEN 
		SET @V_TABLE_NAME = @V_FINAL_JOIN_CONDITIONS;
        SET @V_TABLE_NAME2 = @V_FINAL_JOIN_CONDITIONS;
	else
        SET @V_TABLE_NAME2 = CONCAT(@V_TABLE_NAME," A ");
    END IF;
    
	SET @TOTAL_RECORDS_QUERY = CONCAT("SELECT COUNT(*) INTO @TOTAL_RECORDS FROM " , @V_TABLE_NAME);
    PREPARE TOTAL_RECORDS_QUERY FROM @TOTAL_RECORDS_QUERY;
    EXECUTE TOTAL_RECORDS_QUERY;
    DEALLOCATE PREPARE TOTAL_RECORDS_QUERY;

	IF LENGTH(@V_FINAL_FILTER_CONDITIONS) <> 0 THEN
		SET @FILTERED_RECORDS_QUERY = CONCAT("SELECT COUNT(*) INTO @FILTERED_RECORDS FROM " , @V_TABLE_NAME," WHERE ", @V_FINAL_FILTER_CONDITIONS);
		SET @V_WHERE_CONDITION = CONCAT(" WHERE ",@V_FINAL_FILTER_CONDITIONS," AND ",@V_FINAL_RULE_CONDITIONS);
        SET @V_WHERE_CONDITION2 = CONCAT(" WHERE ",@V_FINAL_FILTER_CONDITIONS," AND NOT(",@V_FINAL_RULE_CONDITIONS,")");
    ELSE 
		SET @FILTERED_RECORDS_QUERY = CONCAT("SELECT COUNT(*) INTO @FILTERED_RECORDS FROM " , @V_TABLE_NAME);
        SET @V_WHERE_CONDITION = CONCAT(" WHERE ",@V_FINAL_RULE_CONDITIONS);
        SET @V_WHERE_CONDITION2 = CONCAT(" WHERE NOT(",@V_FINAL_RULE_CONDITIONS,")");
    END IF;
    
    PREPARE FILTERED_RECORDS_QUERY FROM @FILTERED_RECORDS_QUERY;
    EXECUTE FILTERED_RECORDS_QUERY;
    DEALLOCATE PREPARE FILTERED_RECORDS_QUERY;

    SET @PASSED_RECORDS_QUERY = CONCAT("SELECT COUNT(*) INTO @PASSED_RECORDS FROM ", @V_TABLE_NAME,' ', @V_WHERE_CONDITION );
    PREPARE PASSED_RECORDS_QUERY FROM @PASSED_RECORDS_QUERY;
    EXECUTE PASSED_RECORDS_QUERY;
    DEALLOCATE PREPARE PASSED_RECORDS_QUERY;
    
    INSERT INTO RUN_HISTORY (`RULE_ID`,`RULE_BINDING_ID`,`TOTAL_RECORDS`,`FILTERED_RECORDS`,`PASSED_RECORDS`,`FAILED_RECORDS`) VALUES
    (@V_RULE_ID,IN_RULE_BINDING_ID,@TOTAL_RECORDS,@FILTERED_RECORDS,@PASSED_RECORDS,@FILTERED_RECORDS-@PASSED_RECORDS);

	SELECT MAX(RUN_ID) INTO @V_RUN_ID FROM RUN_HISTORY;

    SET @INSERT_QUERY =  CONCAT(
         "INSERT INTO " , @V_FAILED_DATA_TABLE_NAME , " SELECT " , @V_RUN_ID ,',', IN_RULE_BINDING_ID, ' , "', @V_RULE_ID , '" ,"' , @V_RUN_DATE, '", ', @V_FINAL_SELECT,'  FROM ' ,@V_TABLE_NAME2,@V_WHERE_CONDITION2);
    PREPARE INSERT_QUERY FROM @INSERT_QUERY;
    EXECUTE INSERT_QUERY;
    DEALLOCATE PREPARE INSERT_QUERY;
    
    CALL REFRESH_SCORE_CARD_AND_TREND_CHART_DATA();
    
    SELECT 200 as STATUS_CODE,"Rule Execution Successfull" AS MSG;
END//


CREATE OR REPLACE VIEW `pie_chart1_data` AS 
select 'Failed_Rules' AS `Type`,count(*) AS `No_of_Rules` from `score_card_latest` 
where `score_card_latest`.`FAILED_RECORDS` <> 0
union all 
select 'Passed Rules' AS `Type`,count(*) AS `No_of_Rules` from `score_card_latest`
where `score_card_latest`.`FAILED_RECORDS` = 0;

-- PIE CHART DATA 2 OLD VIEW :
-- CREATE OR REPLACE VIEW `pie_chart2_data` AS 
-- select `score_card_latest`.`RULE_NAME` AS `rule_name`,'Total_Records' AS `Type`,
-- sum(`score_card_latest`.`TOTAL_RECORDS`) AS `No_of_Records` 
-- from `score_card_latest` group by `score_card_latest`.`RULE_NAME` 
-- union all 
-- select `score_card_latest`.`RULE_NAME` AS `rule_name`,'Failed_Records' AS `Failed_Records`,
-- sum(`score_card_latest`.`FAILED_RECORDS`) AS `sum(``Failed_records``)` 
-- from `score_card_latest` group by `score_card_latest`.`RULE_NAME`;

CREATE OR REPLACE VIEW `pie_chart2_data` AS 
 select `score_card_latest`.`RUN_ID` AS 'Run_Id' ,`score_card_latest`.`RULE_NAME` AS `rule_name`,'Passed_Records' AS `Type`,
sum(`score_card_latest`.`PASSED_RECORDS`) AS `No_of_Records` 
from `score_card_latest` group by `score_card_latest`.`RULE_NAME` ,`score_card_latest`.`RUN_ID`
union all 
select `score_card_latest`.`RUN_ID` AS 'Run_Id' ,`score_card_latest`.`RULE_NAME` AS `rule_name`,'Failed_Records' AS `Failed_Records`,
sum(`score_card_latest`.`FAILED_RECORDS`) AS `No_of_Records`
from `score_card_latest` group by `score_card_latest`.`RULE_NAME` , `score_card_latest`.`RUN_ID`;

-- base queries for getting trend chart data for a rule binding


-- for 1 month data
-- SELECT *
-- FROM TREND_CHART_DATA
-- WHERE DATE2 >= SYSDATE() - INTERVAL (DAY(SYSDATE())) DAY
-- AND TABLE_NAME = '<table name>'
-- AND COLUMN_NAME = '<column name>'
-- ORDER BY DATE2;


-- for 3 months data
-- SELECT *
-- FROM TREND_CHART_DATA
-- WHERE DATE2 >= SYSDATE() - INTERVAL 3 MONTH
-- AND TABLE_NAME = '<table name>' 
-- AND COLUMN_NAME = 'FLGDEFAULT'
-- ORDER BY DATE2;

-- for 6 months data
-- SELECT *
-- FROM TREND_CHART_DATA
-- WHERE TABLE_NAME = '<table name>' 
-- AND COLUMN_NAME = 'FLGDEFAULT'
-- ORDER BY DATE2;




-- OLD FUNCTION AND VIEWS FOR TREND CHART, MAY BE USED LATER WHEN NEEDED

-- delimiter //
-- create function group_by_last_n_months(in_date datetime , no_of_months int)
-- returns varchar(70)
-- deterministic
-- begin
-- set @diff =  (period_diff(date_format(sysdate(),'%Y%m'),date_format(in_date,'%Y%m')) div no_of_months) + (period_diff(date_format(sysdate(),'%Y%m'),date_format(in_date,'%Y%m')) div no_of_months !=0);
-- if @diff = 0 then 
-- 	set @diff = 1; 
-- end if;
-- return concat(monthname(sysdate() - interval (@diff -1)*no_of_months month),'-',date_format(in_date,'%Y'));
-- end//


-- delimiter //
-- create function group_by_last_n_months_weight(in_date datetime , no_of_months int)
-- returns int
-- deterministic
-- begin
-- set @diff =  (period_diff(date_format(sysdate(),'%Y%m'),date_format(in_date,'%Y%m')) div no_of_months) + (period_diff(date_format(sysdate(),'%Y%m'),date_format(in_date,'%Y%m')) div no_of_months !=0);
-- if @diff = 0 then 
-- 	set @diff = 1; 
-- end if;
-- return diff;
-- end//




-- create or replace view trend_chart_data_1_months as
-- SELECT RULE_NAME,group_by_last_n_months(LAST_RUN,1) as `MONTH_YEAR`,
-- 	   group_by_last_n_months_weight(LAST_RUN,1) as `ORDER`,
-- 	   SUM(TOTAL_RECORDS) AS TOTAL_RECORDS,
--        SUM(PASSED_RECORDS) AS PASSED_RECORDS,
--        SUM(FAILED_RECORDS) AS FAILED_RECORDS,
--        ROUND(SUM(PASSED_RECORDS)/SUM(TOTAL_RECORDS)*100,2) as `PASS_PERCENTAGE`,
--        ROUND(SUM(FAILED_RECORDS)/SUM(TOTAL_RECORDS)*100,2) as `FAIL_PERCENTAGE`
-- FROM score_card_history
-- GROUP BY RULE_NAME,group_by_last_n_months(LAST_RUN,1),group_by_last_n_months_weight(LAST_RUN,1)
-- ORDER BY group_by_last_n_months_weight(LAST_RUN,1) DESC;


-- create or replace view trend_chart_data_3_months as
-- SELECT RULE_NAME,group_by_last_n_months(LAST_RUN,3) as `MONTH_YEAR`,
-- 	   group_by_last_n_months_weight(LAST_RUN,3) as `ORDER`,
-- 	   SUM(TOTAL_RECORDS) AS TOTAL_RECORDS,
--        SUM(PASSED_RECORDS) AS PASSED_RECORDS,
--        SUM(FAILED_RECORDS) AS FAILED_RECORDS,
--        ROUND(SUM(PASSED_RECORDS)/SUM(TOTAL_RECORDS)*100,2) as `PASS_PERCENTAGE`,
--        ROUND(SUM(FAILED_RECORDS)/SUM(TOTAL_RECORDS)*100,2) as `FAIL_PERCENTAGE`
-- FROM score_card_history
-- GROUP BY RULE_NAME,group_by_last_n_months(LAST_RUN,3),group_by_last_n_months_weight(LAST_RUN,3)
-- ORDER BY group_by_last_n_months_weight(LAST_RUN,3) DESC;


-- create or replace view trend_chart_data_6_months as
-- SELECT RULE_NAME,group_by_last_n_months(LAST_RUN,6) as `MONTH_YEAR`,
-- 	   group_by_last_n_months_weight(LAST_RUN,6) as `ORDER`,
-- 	   SUM(TOTAL_RECORDS) AS TOTAL_RECORDS,
--        SUM(PASSED_RECORDS) AS PASSED_RECORDS,
--        SUM(FAILED_RECORDS) AS FAILED_RECORDS,
--        ROUND(SUM(PASSED_RECORDS)/SUM(TOTAL_RECORDS)*100,2) as `PASS_PERCENTAGE`,
--        ROUND(SUM(FAILED_RECORDS)/SUM(TOTAL_RECORDS)*100,2) as `FAIL_PERCENTAGE`
-- FROM score_card_history
-- GROUP BY RULE_NAME,group_by_last_n_months(LAST_RUN,6),group_by_last_n_months_weight(LAST_RUN,6)
-- ORDER BY group_by_last_n_months_weight(LAST_RUN,6) DESC;

